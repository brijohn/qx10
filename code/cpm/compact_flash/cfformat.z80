; Formats Compact Flash card
; For use with version B2.20 only
;
; (c) Copyright 2020-2023 Brian Johnson <brijohn@gmail.com>
ORG  $100

EXTERN CFINIT
EXTERN CFSETCHS
EXTERN CFREAD
EXTERN CFWRITE
EXTERN PRINTSTRING, PRINTWORDSTRING, PRINTHEXWORD, PRINTHEXBYTE

DIRSECTORS    equ  64   ; Native sectors
SPT           equ  64   ; CPM sectors
PART1OFFSET   equ  $2
IF CHS
PART2OFFSET   equ  $266
ELSE
PART2OFFSET   equ  $3f6
ENDIF

JP MAIN

PART1MSG:    DEFB "Formatting Partition 1", $0D, $0A, 0
PART2MSG:    DEFB "Formatting Partition 2", $0D, $0A, 0
CYLINDERMSG: DEFB "    Cylinder: ", 0
HEADMSG:     DEFB "    Head: ", 0
SECTORMSG:   DEFB "    Sector: ", 0
LBAMSG:      DEFB "       LBA: ", 0
STATUSMSG:   DEFB "    Status: ", 0
LFCR:        DEFB $0A
CR:          DEFB $0D, 0

MAIN:
	CALL CFINIT
	LD  HL, PART1MSG
	CALL PRINTSTRING
	LD  BC, PART1OFFSET    ; Start at CPM track 2
	XOR A                  ; Start at CPM sector 0
	CALL FORMAT            ; Format first partition
	LD  HL, PART2MSG
	CALL PRINTSTRING
	LD  BC, PART2OFFSET    ; Start at CPM track 614
	XOR A                  ; Start at CPM sector 0
	CALL FORMAT            ; Format second partition
	JP $0000               ; Warm reboot (reload ccp)

; Prints current Sector Address values during formatting
PRINTADDR:
IF CHS
	PUSH AF
	LD  HL, CR
	CALL PRINTSTRING
	LD  HL, CYLINDERMSG
	CALL PRINTSTRING
	LD  HL, (CYLINDER)
	CALL PRINTHEXWORD
	LD  HL, HEADMSG
	CALL PRINTSTRING
	LD  A, (HEAD)
	CALL PRINTHEXBYTE
	LD  HL, SECTORMSG
	CALL PRINTSTRING
	LD  A, (SECTOR)
	CALL PRINTHEXBYTE
	LD  HL, STATUSMSG
	CALL PRINTSTRING
	POP AF
	CALL PRINTHEXBYTE
	RET
ELSE
	PUSH AF
	LD  HL, CR
	CALL PRINTSTRING
	LD  HL, LBAMSG
	CALL PRINTSTRING
	LD  A, (HEAD)
	CALL PRINTHEXBYTE
	LD  HL, (CYLINDER)
	CALL PRINTHEXWORD
	LD  A, (SECTOR)
	CALL PRINTHEXBYTE
	LD  HL, STATUSMSG
	CALL PRINTSTRING
	POP AF
	CALL PRINTHEXBYTE
	RET
ENDIF

; Format partition
; BC = starting track
; A  = starting sector
FORMAT:
	LD  (CPMTRACK), BC     ; Store track number
	LD  (CPMSECTOR), A     ; Store Sector number
	LD  D, DIRSECTORS      ; D = number of sectors for directory
NEXTBLOCK:
	PUSH DE                ; Preserve DE
	CALL SETADDR           ; Convert CPM track/sector to Sector Address values and setup CF
	LD  D, 1               ; D  = number of sectors to write 
	LD  HL, BUFFER         ; HL = sector buffer 
	CALL CFWRITE           ; Write sector
	CALL PRINTADDR         ; Update screen with current Sector Address values
	POP DE                 ; Restore DE
	LD  BC, (CPMTRACK)     ; BC = current track
	LD  A, (CPMSECTOR)     ; A  = current sector
	ADD A, $04             ; Increment sector count by 4 (4 cpm sectors per one CF sector)
	CP  SPT                ; Compare sector count to number of cpm sectors per track
	JR  NZ, SKIPTRACKINC
	INC  BC                ; If equal increment track
	LD  (CPMTRACK), BC     ; and store new track value for next write
	XOR A                  ; then zero sector count
SKIPTRACKINC:
	LD  (CPMSECTOR), A     ; Store cpm sector for next write
	DEC D                  ; Decrement count of remaining sectors to write
	JR  NZ, NEXTBLOCK      ; If not zero write next sector
	LD  HL, LFCR
	CALL PRINTSTRING       ; Print newline
	RET

; Convert CPM track/sector to Sector Address values
; BC = Track
; A  = Sector
SETADDR:
IF CHS
	SRL A
	SRL A
	INC A                  ; Divide CPM Sector by 4 and add 1
	LD  (SECTOR), A        ; Then store for later
	LD  A, C               ; A = Low track byte
	AND $3                 ; Low two bits of cpm track are the CHS head value
	LD  (HEAD), A          ; Store head value
	LD  A, C               ; A = Low track byte
	RRA                    ; Rotate track right two and
	RRA                    ; mask with 3f to grab the low
	AND $3F                ; 6 bits of the cylinder value
	LD  H, A               ; Store this in the H register
	LD  A, B               ; A = High track byte
	RRCA                   ; Rotate the two LSB into the
	RRCA                   ; two MSB
	LD  L, A               ; Store this value in the L register
	AND $C0                ; Clear all buts except the top 2 MSB
	OR H                   ; Combine the 6 LSB of H with the two MSB of A
	LD  (CYLINDER), A      ; Store low cylinder byte
	LD  A, L               ;
	AND $3                 ; Keep only the two LSB
	LD (CYLINDER+1), A     ; Store high track byte
	LD  BC, (CYLINDER)     ; BC = CF cylinder
	LD  A, (SECTOR)
	LD  E, A               ; E  = CF sector
	LD  A, (HEAD)          ; A  = CF head
	CALL CFSETCHS          ; Write CHS info to CF in preperation for read/write
	RET
ELSE
	SRL A                  ; Divide CPM Sector by 4
	SRL A
	LD   H, B              ; Move BC TO HL
	LD   L, C
	ADD  HL, HL            ; Shift CPMTRACK left by 4
	ADD  HL, HL            ; There are 16 sectors per track
	ADD  HL, HL            ; so this will multiply the current
	ADD  HL, HL            ; track by 16.
	AND  $0F               ; Ensure sector is between 0-15
	ADD  A, L              ; Add sector to low byte of track
	LD   (SECTOR), A       ; Store LBA7-0 for later
	LD   E, A              ; and move it to E
	LD   A, H
	LD   (CYLINDER), A     ; Store LBA15-8 for later
	XOR  A
	LD   (CYLINDER+1), A   ; LBA24-16 is always 0
	LD   (HEAD), A         ; Same with LBA28-25
	LD   BC, (CYLINDER)    ; BC should contain LBA24-8
	CALL CFSETCHS          ; Write LBA info to CF in preperation for read/write
	RET
ENDIF

CPMTRACK:  DEFW 0
CPMSECTOR: DEFB 0
CYLINDER:  DEFW 0
HEAD:      DEFB 0
SECTOR:    DEFB 0

BUFFER:    DS 512, $E5
