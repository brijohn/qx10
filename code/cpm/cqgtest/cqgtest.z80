; cqgtest.asm
; Scott Baker, https://www.smbaker.com/
;
; Commodity Quote Graphics 1M Board Test
;
; The board uses MEMX to access memory, and it uses a bank register at
; 0xF0 - 0xF7. Each one of the bank registers represents an 8K chunk of
; memory. The lower 7 bits are the page to map. The MSB is set to 1 to
; enable the board for that bank, or 0 to disable it (this permits
; multiple board to be installed).
;
; I can't find any reference in the QX10 BIOS to copy memory to/from MEMX,
; so I ended up modifying the 2.26 BIOS to change the behavior of Bank3
; so that it selects MEMX.
;
; Changelog:
;   2021-08-22: Initial release
;   2023-09-01: Remove the need for a specific BIOS version
;   2023-09-01: Test bank registers F0-F6
;   2023-09-11: Update code to compile with z88dk-asm
;

WARMBOOT    equ      0
CQPORT      equ      $F0
PAGES       equ      $80     ; 1 Megabyte
PAGEWORDS   equ      $1000
PAGEBYTES   equ      PAGEWORDS * 2

	ORG 100h

START:
	CALL  RELOCATE
	IN    A, ($30)
	AND   A, $F0
	LD    (CALLINGBANK), A
	LD    DE, BANNER
	CALL  PRINTMSG
BANKLOOP:
	LD    DE, BANKMSG
	CALL  PRINTMSG
	LD    A,(CBANK)
	CALL  PRINTHEXBYTE
	LD    DE, CRLF
	CALL  PRINTMSG
WRITETEST:
	LD    B, PAGES       ; B = number of pages to write, 128 pages at 8K = 1M
	LD    C, 0

WLOOP0:
	DEC   B
	PUSH  BC             ; Save outer loop counter

	LD    DE, WPAGEMSG   ; Display "Write Page: <n>"
	CALL  PRINTMSG
	LD    A,B
	CALL  PRINTHEXBYTE

	PUSH  BC             ; Save the outer loop counter
	LD    DE, BC
	LD    A,(CBANK)
	LD    E,A
	LD    BC, PAGEWORDS
	LD    HL, BUF
WLOOP1:
	LD    (HL), DE       ; Prep the buffer
	INC   HL
	INC   HL
	INC   DE
	DEC   BC
	LD    A, B           ; Is Inner Loop Count (BC) Zero?
	OR    C
	JR    NZ, WLOOP1
	POP   BC

	LD    A, B           ; Set the page
	CALL  CQSET
	LD    IX, 0
	LD    IY, 1
	CALL  BANKTOADDR
	LD    DE, BUF
	EX DE,HL
	LD    BC, PAGEBYTES
	CALL  COPYBLOCK

	OR    A              ; check copy result
	JP    NZ, COPYERR

	POP   BC             ; restore outer loop counter
	XOR   A              ; Is Outer Loop Count (B) Zero?
	OR    B
	JR    NZ, WLOOP0

READTEST:
	LD    B, PAGES       ; B = number of pages to read, 128 pages at 8K = 1M
	LD    C, 0
RLOOP0:
	DEC   B
	PUSH  BC             ; Save outer loop counter
	LD    DE, RPAGEMSG   ; Display "Read Page: <n>"
	CALL  PRINTMSG
	LD    A,B
	CALL  PRINTHEXBYTE

	LD    A, $77         ; Put some junk in the buffer
	LD    (BUF), A
	LD    A, $88
	LD    (BUF+1), A

	LD    A, B           ; Set the page
	CALL  CQSET
	LD    IX, 1
	LD    IY, 0
	CALL  BANKTOADDR
	LD    DE, BUF
	LD    BC, PAGEBYTES
	CALL  COPYBLOCK        ; Copy the buffer

	OR    A             ; check copy result
	JP    NZ, COPYERR

	POP   BC            ; Get the outer loop counter back
	PUSH  BC

	LD    DE, BC
	LD    A,(CBANK)
	LD    E,A
	LD    BC, PAGEWORDS
	LD    HL, BUF
RLOOP1:
	LD    A, (HL)
	CP    E
	JR    NZ, NOTOKAY
	INC   HL
	LD    A, (HL)
	DEC   HL
	CP    D
	JR    NZ, NOTOKAY
	JR    OKAY
NOTOKAY:
	PUSH  DE
	LD    DE, ERRMSG     ; Ruh Roh...
	CALL  PRINTMSG
	POP   DE

	CALL  PRINTHEXDE

	PUSH  DE
	LD    DE, NEMSG
	CALL  PRINTMSG
	LD    DE, HL
	CALL  PRINTHEXDE
	LD    E, (HL)
	INC   HL
	LD    D, (HL)
	DEC   HL
	CALL  PRINTHEXDE
	LD    DE, CRLF
	CALL  PRINTMSG
	POP   DE
	CALL  CKMAXERR
OKAY:
	INC   DE
	INC   HL
	INC   HL
	DEC   BC
	LD    A, B            ; Is Inner Loop Count (BC) Zero?
	OR    C
	JR    NZ, RLOOP1

	POP   BC              ; Restore outer loop counter
	XOR   A               ; Is Outer Loop Count (B) Zero?
	OR    B
	JP    NZ, RLOOP0

DONE:
	LD    A,(CBANK)
	INC   A
	LD    (CBANK),A
	CP    $F7
	JP    NZ,BANKLOOP
	LD    DE, DONEMSG
	CALL  PRINTMSG
	JP    WARMBOOT

RELOCATE:
	LD    DE, SELXMEM
	LD    HL, CODE_END
	LD    BC, COPY_LENGTH
	LDIR
	RET


PRINTMSG:
	PUSH  HL
	PUSH  BC
	LD    C, $09
	CALL  $0005
	POP   BC
	POP   HL
	RET

COPYERR:
	LD    DE, COPYERRMSG
	PUSH  AF
	CALL  PRINTMSG
	POP   AF
	CALL  PRINTHEXBYTE
	LD    DE, CRLF
	CALL  PRINTMSG
	JP    WARMBOOT

	; Check to see if the maximum error count is exceeded
CKMAXERR:
	LD    A, (ERRCOUNT)
	INC   A
	LD    (ERRCOUNT), A
	CP    $08
	RET   C
	LD    DE, MAXERRMSG
	CALL  PRINTMSG
	JP    WARMBOOT

PRINTHEXDE:
	LD    A, D
	CALL  PRINTHEXBYTE
	LD    A, E
	CALL  PRINTHEXBYTE
	RET
PRINTHEXBYTE:
	PUSH  AF
	RRA
	RRA
	RRA
	RRA
	CALL  PRINTHEXNIB
	POP   AF
PRINTHEXNIB:
	PUSH  HL
	PUSH  BC
	PUSH  DE
	AND   $0F
	ADD   A, $90
	DAA
	ADC   A, $40
	DAA
	LD    C, $02
	LD    E, A
	CALL  $0005
	POP   DE
	POP   BC
	POP   HL
	RET


BANKTOADDR:
	LD    HL,$0000
	LD    A,(CBANK)
	AND   $7
	RET   Z
	LD    BC,$2000
ADD8K:
	ADD   HL,BC
	DEC   A
	JR    NZ,ADD8K
	RET

	; Set Bank 0 (0000-1FFFF) to page
	;   A = Page
CQSET:
	PUSH  AF
	PUSH  BC
    LD    BC, (CBANK)
	OR    A, $80          ; set the enable board bit
	OUT   (C), A
    POP   BC
	POP   AF
	RET
CODE_END  equ $

PHASE $e000
COPY_LENGTH  equ STACK - SELXMEM + 2
SELXMEM:
	AND   $01              ;
	CP    $00              ;
	JR    NZ, XMEMBANK     ; If A == 0, Load 0x20 into A
	LD    A, (CALLINGBANK) ;
	JR    SETBANK          ;
XMEMBANK:
	LD    A,$08            ; Else Load 0x08 into A
SETBANK:
	OR    $02              ;
	OUT   ($18),A          ; Write A to Bank switch IO register
	RET

; FUNCTION: Copys a block of memory
;   Parameters
;     IX = src bank (0 = codebank, 1 = xmem)
;     IY = dst bank (0 = codebank, 1 = xmem)
;     BC = Number of bytes to copy
;     HL = Source address
;     DE = Destination address
;
COPYBLOCK:
	LD    A,B                          ; Load A with top half of BC
	OR    C
	RET   Z                            ; return if BC == 0
	DI
	LD    (STACK), SP                  ; Store SP
	LD    SP, STACK                    ; Set SP to tempory stack
	LD    (BYTECOUNT),BC               ; Save original BC (byte count) value
	LD    (SRCADDR),HL                 ; Save original HL (src address) value
	LD    (DSTADDR),DE                 ; Save original DE (dest address) value
COPYLOOP:
	LD    HL, (BYTECOUNT)              ; HL = byte count
	LD    DE, 00080h                   ; DE = 128 (size of copy buffer)
	OR    A                            ; Clear carry flag
	SBC   HL, DE                       ; Subtract 128 from byte count
	JR    C,  LASTCHUNK                ; Jump if HL (byte count) is less then 128
	LD    A,  L                        ; A = bottom half of HL
	OR    H
	JR    Z,  LASTCHUNK                ; Jump if HL (byte count) is 0
	LD    (BYTECOUNT), HL              ; Store updated byte count (remaing bytes)
	LD    BC ,00080h
	LD    (XFERBYTES), BC              ; Copy 128 bytes this loop iteration
	JR    XFER
LASTCHUNK:
	ADD   HL, DE                       ; Add 128 back to byte count (undo previous subtraction)
	LD    (XFERBYTES), HL              ; Store byte count to transfer this loop iternation
	LD    A,  $FF
	LD    (XFERDONE), A                ; Mark as last loop iteration
XFER:
	LD    A,  IXL                      ; A = src bank
	CALL  SELXMEM                      ; Select source bank
	LD    BC, (XFERBYTES)              ; BC = Number of bytes (128 or less)
	LD    HL, (SRCADDR)                ; HL = Source address
	LD    DE, XFERBUFFER               ; DE = Temporary copy buffer
	LDIR                               ; Copy next set of 128 bytes to buffer
	LD    (SRCADDR), HL                ; Save updated src address pointer
	LD    A, IYL                       ; A = dest bank
	CALL  SELXMEM                      ; Select destination bank
	LD    DE, (DSTADDR)                ; DE = Destination address
	LD    BC, (XFERBYTES)              ; BC = Number of bytes (128 or less)
	LD    HL, XFERBUFFER               ; HL = Temporary copy buffer
	LDIR                               ; Copy buffer to destination address
	LD    (DSTADDR), DE                ; Saved updated dest address pointer
	LD    A, (XFERDONE)                ; A = End of loop mark
	OR    A
	JP    Z, COPYLOOP                  ; If A == 0 copy next 128 byte block, else we are done
	XOR   A
	LD    (XFERDONE), A                ; Clear end of loop mark
	CALL  SELXMEM                      ; Select original bank
	LD    SP, (STACK)                  ; restore SP
	XOR   A
	EI
	RET
CALLINGBANK: DB 0
XFERDONE:    DB 0
XFERBYTES:   DW 0
BYTECOUNT:   DW 0
SRCADDR:     DW 0
DSTADDR:     DW 0
XFERBUFFER:  DS $80

             DS $24
STACK:       DW 0
DEPHASE

BANNER:     dm "Commodity Quote Graphics memory board test. Scott M Baker.", $0D, $0A
            dm "   Updates by Brian Johnson", $0D, $0A, "$"
DONEMSG:    dm $0D, $0A, "Done.", $0D, $0A, "$"
ERRMSG:     dm $0D, $0A, "Error Comparing: $"
CRLF:       dm $0D, $0A, "$"
NEMSG:      dm " != $"
COPYERRMSG: dm $0D, $0A, "Error copying bank: $"
BANKMSG:    dm $0D, "Testing Bank: $"
WPAGEMSG:   dm $0D, "Write Page: $"
RPAGEMSG:   dm $0D, " Read Page: $"
MAXERRMSG:  dm $0D, $0A, "Too many errors", $0D, $0A, "$"

CBANK:      dw CQPORT
ERRCOUNT:   db 0

	; Make sure buf is at the end of the program. We will put up to 8K here.
BUF equ $1000

